`celldefine
module AND2_X0P5M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X0P5M_A12TR
`endcelldefine

`celldefine
module AND2_X0P7M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X0P7M_A12TR
`endcelldefine

`celldefine
module AND2_X11M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X11M_A12TR
`endcelldefine

`celldefine
module AND2_X1M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X1M_A12TR
`endcelldefine

`celldefine
module AND2_X1P4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X1P4M_A12TR
`endcelldefine

`celldefine
module AND2_X2M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X2M_A12TR
`endcelldefine

`celldefine
module AND2_X3M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X3M_A12TR
`endcelldefine

`celldefine
module AND2_X4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X4M_A12TR
`endcelldefine

`celldefine
module AND2_X6M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X6M_A12TR
`endcelldefine

`celldefine
module AND2_X8M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // AND2_X8M_A12TR
`endcelldefine

`celldefine
module AND3_X0P5M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X0P5M_A12TR
`endcelldefine

`celldefine
module AND3_X0P7M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X0P7M_A12TR
`endcelldefine

`celldefine
module AND3_X11M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X11M_A12TR
`endcelldefine

`celldefine
module AND3_X1M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X1M_A12TR
`endcelldefine

`celldefine
module AND3_X1P4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X1P4M_A12TR
`endcelldefine

`celldefine
module AND3_X2M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X2M_A12TR
`endcelldefine

`celldefine
module AND3_X3M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X3M_A12TR
`endcelldefine

`celldefine
module AND3_X4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X4M_A12TR
`endcelldefine

`celldefine
module AND3_X6M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X6M_A12TR
`endcelldefine

`celldefine
module AND3_X8M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // AND3_X8M_A12TR
`endcelldefine

`celldefine
module AND4_X0P5M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X0P5M_A12TR
`endcelldefine

`celldefine
module AND4_X0P7M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X0P7M_A12TR
`endcelldefine

`celldefine
module AND4_X1M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X1M_A12TR
`endcelldefine

`celldefine
module AND4_X1P4M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X1P4M_A12TR
`endcelldefine

`celldefine
module AND4_X2M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X2M_A12TR
`endcelldefine

`celldefine
module AND4_X3M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X3M_A12TR
`endcelldefine

`celldefine
module AND4_X4M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X4M_A12TR
`endcelldefine

`celldefine
module AND4_X6M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X6M_A12TR
`endcelldefine

`celldefine
module AND4_X8M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // AND4_X8M_A12TR
`endcelldefine

`celldefine
module NAND2_X0P5M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND2_X0P5A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X0P5A_A12TR
`endcelldefine

`celldefine
module NAND2_X0P7M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND2_X0P7A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X0P7A_A12TR
`endcelldefine

`celldefine
module NAND2_X1M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X1M_A12TR
`endcelldefine

`celldefine
module NAND2_X1A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X1A_A12TR
`endcelldefine

`celldefine
module NAND2_X1P4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND2_X1P4A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X1P4A_A12TR
`endcelldefine

`celldefine
module NAND2_X2M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X2M_A12TR
`endcelldefine

`celldefine
module NAND2_X2A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X2A_A12TR
`endcelldefine

`celldefine
module NAND2_X3M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X3M_A12TR
`endcelldefine

`celldefine
module NAND2_X3A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X3A_A12TR
`endcelldefine

`celldefine
module NAND2_X4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X4M_A12TR
`endcelldefine

`celldefine
module NAND2_X4A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X4A_A12TR
`endcelldefine

`celldefine
module NAND2_X6M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X6M_A12TR
`endcelldefine

`celldefine
module NAND2_X6A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X6A_A12TR
`endcelldefine

`celldefine
module NAND2_X8M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X8M_A12TR
`endcelldefine

`celldefine
module NAND2_X8A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NAND2_X8A_A12TR
`endcelldefine

`celldefine
module NAND2B_X0P5M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND2B_X0P7M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND2B_X1M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X1M_A12TR
`endcelldefine

`celldefine
module NAND2B_X1P4M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND2B_X2M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X2M_A12TR
`endcelldefine

`celldefine
module NAND2B_X3M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X3M_A12TR
`endcelldefine

`celldefine
module NAND2B_X4M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X4M_A12TR
`endcelldefine

`celldefine
module NAND2B_X6M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X6M_A12TR
`endcelldefine

`celldefine
module NAND2B_X8M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NAND2B_X8M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X0P5M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X0P7M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X1M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X1M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X1P4M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X2M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X2M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X3M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X3M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X4M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X4M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X6M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X6M_A12TR
`endcelldefine

`celldefine
module NAND2XB_X8M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NAND2XB_X8M_A12TR
`endcelldefine

`celldefine
module NAND3_X0P5M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND3_X0P5A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X0P5A_A12TR
`endcelldefine

`celldefine
module NAND3_X0P7M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND3_X0P7A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X0P7A_A12TR
`endcelldefine

`celldefine
module NAND3_X1M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X1M_A12TR
`endcelldefine

`celldefine
module NAND3_X1A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X1A_A12TR
`endcelldefine

`celldefine
module NAND3_X1P4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND3_X1P4A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X1P4A_A12TR
`endcelldefine

`celldefine
module NAND3_X2M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X2M_A12TR
`endcelldefine

`celldefine
module NAND3_X2A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X2A_A12TR
`endcelldefine

`celldefine
module NAND3_X3M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X3M_A12TR
`endcelldefine

`celldefine
module NAND3_X3A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X3A_A12TR
`endcelldefine

`celldefine
module NAND3_X4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X4M_A12TR
`endcelldefine

`celldefine
module NAND3_X4A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X4A_A12TR
`endcelldefine

`celldefine
module NAND3_X6M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X6M_A12TR
`endcelldefine

`celldefine
module NAND3_X6A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NAND3_X6A_A12TR
`endcelldefine

`celldefine
module NAND3B_X0P5M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND3B_X0P7M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND3B_X1M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X1M_A12TR
`endcelldefine

`celldefine
module NAND3B_X1P4M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND3B_X2M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X2M_A12TR
`endcelldefine

`celldefine
module NAND3B_X3M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X3M_A12TR
`endcelldefine

`celldefine
module NAND3B_X4M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X4M_A12TR
`endcelldefine

`celldefine
module NAND3B_X6M_A12TR (Y, AN, B, C);
output Y;
input AN, B, C;
endmodule // NAND3B_X6M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X0P5M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X0P7M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X1M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X1M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X1P4M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X2M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X2M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X3M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X3M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X4M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X4M_A12TR
`endcelldefine

`celldefine
module NAND3XXB_X6M_A12TR (Y, A, B, CN);
output Y;
input A, B, CN;
endmodule // NAND3XXB_X6M_A12TR
`endcelldefine

`celldefine
module NAND4_X0P5M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND4_X0P5A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X0P5A_A12TR
`endcelldefine

`celldefine
module NAND4_X0P7M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND4_X0P7A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X0P7A_A12TR
`endcelldefine

`celldefine
module NAND4_X1M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X1M_A12TR
`endcelldefine

`celldefine
module NAND4_X1A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X1A_A12TR
`endcelldefine

`celldefine
module NAND4_X1P4M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND4_X1P4A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X1P4A_A12TR
`endcelldefine

`celldefine
module NAND4_X2M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X2M_A12TR
`endcelldefine

`celldefine
module NAND4_X2A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X2A_A12TR
`endcelldefine

`celldefine
module NAND4_X3M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X3M_A12TR
`endcelldefine

`celldefine
module NAND4_X3A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X3A_A12TR
`endcelldefine

`celldefine
module NAND4_X4M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X4M_A12TR
`endcelldefine

`celldefine
module NAND4_X4A_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // NAND4_X4A_A12TR
`endcelldefine

`celldefine
module NAND4B_X0P5M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND4B_X0P7M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND4B_X1M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X1M_A12TR
`endcelldefine

`celldefine
module NAND4B_X1P4M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND4B_X2M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X2M_A12TR
`endcelldefine

`celldefine
module NAND4B_X3M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X3M_A12TR
`endcelldefine

`celldefine
module NAND4B_X4M_A12TR (Y, AN, B, C, D);
output Y;
input AN, B, C, D;
endmodule // NAND4B_X4M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X0P5M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X0P5M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X0P7M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X0P7M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X1M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X1M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X1P4M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X1P4M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X2M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X2M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X3M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X3M_A12TR
`endcelldefine

`celldefine
module NAND4XXXB_X4M_A12TR (Y, A, B, C, DN);
output Y;
input A, B, C, DN;
endmodule // NAND4XXXB_X4M_A12TR
`endcelldefine

`celldefine
module AO21_X0P5M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X0P5M_A12TR
`endcelldefine

`celldefine
module AO21_X0P7M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X0P7M_A12TR
`endcelldefine

`celldefine
module AO21_X1M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X1M_A12TR
`endcelldefine

`celldefine
module AO21_X1P4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X1P4M_A12TR
`endcelldefine

`celldefine
module AO21_X2M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X2M_A12TR
`endcelldefine

`celldefine
module AO21_X3M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X3M_A12TR
`endcelldefine

`celldefine
module AO21_X4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X4M_A12TR
`endcelldefine

`celldefine
module AO21_X6M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AO21_X6M_A12TR
`endcelldefine

`celldefine
module AO21B_X0P5M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X0P5M_A12TR
`endcelldefine

`celldefine
module AO21B_X0P7M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X0P7M_A12TR
`endcelldefine

`celldefine
module AO21B_X1M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X1M_A12TR
`endcelldefine

`celldefine
module AO21B_X1P4M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X1P4M_A12TR
`endcelldefine

`celldefine
module AO21B_X2M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X2M_A12TR
`endcelldefine

`celldefine
module AO21B_X3M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X3M_A12TR
`endcelldefine

`celldefine
module AO21B_X4M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X4M_A12TR
`endcelldefine

`celldefine
module AO21B_X6M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AO21B_X6M_A12TR
`endcelldefine

`celldefine
module AO1B2_X0P5M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X0P5M_A12TR
`endcelldefine

`celldefine
module AO1B2_X0P7M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X0P7M_A12TR
`endcelldefine

`celldefine
module AO1B2_X1M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X1M_A12TR
`endcelldefine

`celldefine
module AO1B2_X1P4M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X1P4M_A12TR
`endcelldefine

`celldefine
module AO1B2_X2M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X2M_A12TR
`endcelldefine

`celldefine
module AO1B2_X3M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X3M_A12TR
`endcelldefine

`celldefine
module AO1B2_X4M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X4M_A12TR
`endcelldefine

`celldefine
module AO1B2_X6M_A12TR (Y, A0N, B0, B1);
output Y;
input A0N, B0, B1;
endmodule // AO1B2_X6M_A12TR
`endcelldefine

`celldefine
module AO22_X0P5M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X0P5M_A12TR
`endcelldefine

`celldefine
module AO22_X0P7M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X0P7M_A12TR
`endcelldefine

`celldefine
module AO22_X1M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X1M_A12TR
`endcelldefine

`celldefine
module AO22_X1P4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X1P4M_A12TR
`endcelldefine

`celldefine
module AO22_X2M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X2M_A12TR
`endcelldefine

`celldefine
module AO22_X3M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X3M_A12TR
`endcelldefine

`celldefine
module AO22_X4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X4M_A12TR
`endcelldefine

`celldefine
module AO22_X6M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AO22_X6M_A12TR
`endcelldefine

`celldefine
module AOI21_X0P5M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI21_X0P7M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI21_X1M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X1M_A12TR
`endcelldefine

`celldefine
module AOI21_X1P4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI21_X2M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X2M_A12TR
`endcelldefine

`celldefine
module AOI21_X3M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X3M_A12TR
`endcelldefine

`celldefine
module AOI21_X4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X4M_A12TR
`endcelldefine

`celldefine
module AOI21_X6M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X6M_A12TR
`endcelldefine

`celldefine
module AOI21_X8M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // AOI21_X8M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X0P5M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X0P7M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X1M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X1M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X1P4M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X2M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X2M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X3M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X3M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X4M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X4M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X6M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X6M_A12TR
`endcelldefine

`celldefine
module AOI2XB1_X8M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // AOI2XB1_X8M_A12TR
`endcelldefine

`celldefine
module AOI31_X0P5M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI31_X0P7M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI31_X1M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X1M_A12TR
`endcelldefine

`celldefine
module AOI31_X1P4M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI31_X2M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X2M_A12TR
`endcelldefine

`celldefine
module AOI31_X3M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X3M_A12TR
`endcelldefine

`celldefine
module AOI31_X4M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X4M_A12TR
`endcelldefine

`celldefine
module AOI31_X6M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // AOI31_X6M_A12TR
`endcelldefine

`celldefine
module AOI21B_X0P5M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI21B_X0P7M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI21B_X1M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X1M_A12TR
`endcelldefine

`celldefine
module AOI21B_X1P4M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI21B_X2M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X2M_A12TR
`endcelldefine

`celldefine
module AOI21B_X3M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X3M_A12TR
`endcelldefine

`celldefine
module AOI21B_X4M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X4M_A12TR
`endcelldefine

`celldefine
module AOI21B_X6M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X6M_A12TR
`endcelldefine

`celldefine
module AOI21B_X8M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // AOI21B_X8M_A12TR
`endcelldefine

`celldefine
module AOI22_X0P5M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI22_X0P7M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI22_X1M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X1M_A12TR
`endcelldefine

`celldefine
module AOI22_X1P4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI22_X2M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X2M_A12TR
`endcelldefine

`celldefine
module AOI22_X3M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X3M_A12TR
`endcelldefine

`celldefine
module AOI22_X4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X4M_A12TR
`endcelldefine

`celldefine
module AOI22_X6M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X6M_A12TR
`endcelldefine

`celldefine
module AOI22_X8M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // AOI22_X8M_A12TR
`endcelldefine

`celldefine
module AOI32_X0P5M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI32_X0P7M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI32_X1M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X1M_A12TR
`endcelldefine

`celldefine
module AOI32_X1P4M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI32_X2M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X2M_A12TR
`endcelldefine

`celldefine
module AOI32_X3M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X3M_A12TR
`endcelldefine

`celldefine
module AOI32_X4M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X4M_A12TR
`endcelldefine

`celldefine
module AOI32_X6M_A12TR (Y, A0, A1, A2, B0, B1);
output Y;
input A0, A1, A2, B0, B1;
endmodule // AOI32_X6M_A12TR
`endcelldefine

`celldefine
module AOI211_X0P5M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI211_X0P7M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI211_X1M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X1M_A12TR
`endcelldefine

`celldefine
module AOI211_X1P4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI211_X2M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X2M_A12TR
`endcelldefine

`celldefine
module AOI211_X3M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X3M_A12TR
`endcelldefine

`celldefine
module AOI211_X4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AOI211_X4M_A12TR
`endcelldefine

`celldefine
module AOI221_X0P5M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI221_X0P7M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI221_X1M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X1M_A12TR
`endcelldefine

`celldefine
module AOI221_X1P4M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI221_X2M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X2M_A12TR
`endcelldefine

`celldefine
module AOI221_X3M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X3M_A12TR
`endcelldefine

`celldefine
module AOI221_X4M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // AOI221_X4M_A12TR
`endcelldefine

`celldefine
module AOI222_X0P5M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X0P5M_A12TR
`endcelldefine

`celldefine
module AOI222_X0P7M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X0P7M_A12TR
`endcelldefine

`celldefine
module AOI222_X1M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X1M_A12TR
`endcelldefine

`celldefine
module AOI222_X1P4M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X1P4M_A12TR
`endcelldefine

`celldefine
module AOI222_X2M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X2M_A12TR
`endcelldefine

`celldefine
module AOI222_X3M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X3M_A12TR
`endcelldefine

`celldefine
module AOI222_X4M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // AOI222_X4M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X0P5M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X0P5M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X0P7M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X0P7M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X1M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X1M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X1P4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X1P4M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X2M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X2M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X3M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X3M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X4M_A12TR
`endcelldefine

`celldefine
module AO21A1AI2_X6M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // AO21A1AI2_X6M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X0P5M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X0P5M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X0P7M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X0P7M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X1M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X1M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X1P4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X1P4M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X2M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X2M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X3M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X3M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X4M_A12TR
`endcelldefine

`celldefine
module OA21A1OI2_X6M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA21A1OI2_X6M_A12TR
`endcelldefine

`celldefine
module ADDH_X1M_A12TR ( S, CO, A, B);
output S, CO;
input A, B;
endmodule // ADDH_X1M_A12TR
`endcelldefine

`celldefine
module ADDH_X1P4M_A12TR ( S, CO, A, B);
output S, CO;
input A, B;
endmodule // ADDH_X1P4M_A12TR
`endcelldefine

`celldefine
module ADDH_X2M_A12TR ( S, CO, A, B);
output S, CO;
input A, B;
endmodule // ADDH_X2M_A12TR
`endcelldefine

`celldefine
module ADDF_X1M_A12TR ( S, CO, A, B, CI);
output S, CO;
input A, B, CI;
endmodule // ADDF_X1M_A12TR
`endcelldefine

`celldefine
module ADDF_X1P4M_A12TR ( S, CO, A, B, CI);
output S, CO;
input A, B, CI;
endmodule // ADDF_X1P4M_A12TR
`endcelldefine

`celldefine
module ADDF_X2M_A12TR ( S, CO, A, B, CI);
output S, CO;
input A, B, CI;
endmodule // ADDF_X2M_A12TR
`endcelldefine

`celldefine
module ADDFCIN_X1M_A12TR ( SUM, CO, A, B, CIN);
output SUM, CO;
input A, B, CIN;
endmodule // ADDFCIN_X1M_A12TR
`endcelldefine

`celldefine
module ADDFCIN_X1P4M_A12TR ( SUM, CO, A, B, CIN);
output SUM, CO;
input A, B, CIN;
endmodule // ADDFCIN_X1P4M_A12TR
`endcelldefine

`celldefine
module ADDFCIN_X2M_A12TR ( SUM, CO, A, B, CIN);
output SUM, CO;
input A, B, CIN;
endmodule // ADDFCIN_X2M_A12TR
`endcelldefine

`celldefine
module ADDFH_X1M_A12TR ( SUM, CO, A, B, CI);
output SUM, CO;
input A, B, CI;
endmodule // ADDFH_X1M_A12TR
`endcelldefine

`celldefine
module ADDFH_X1P4M_A12TR ( SUM, CO, A, B, CI);
output SUM, CO;
input A, B, CI;
endmodule // ADDFH_X1P4M_A12TR
`endcelldefine

`celldefine
module ADDFH_X2M_A12TR ( SUM, CO, A, B, CI);
output SUM, CO;
input A, B, CI;
endmodule // ADDFH_X2M_A12TR
`endcelldefine

`celldefine
module BENC_X11M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X11M_A12TR
`endcelldefine

`celldefine
module BENC_X16M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X16M_A12TR
`endcelldefine

`celldefine
module BENC_X2M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X2M_A12TR
`endcelldefine

`celldefine
module BENC_X3M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X3M_A12TR
`endcelldefine

`celldefine
module BENC_X4M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X4M_A12TR
`endcelldefine

`celldefine
module BENC_X6M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X6M_A12TR
`endcelldefine

`celldefine
module BENC_X8M_A12TR (SN, AN, X2, M2, M1, M0);
output SN, AN, X2;
input M2, M1, M0;
endmodule // BENC_X8M_A12TR
`endcelldefine

`celldefine
module BMXIT_X0P7M_A12TR (PPN, X2, AN, SN, D1, D0);
output PPN;
input X2, AN, SN, D1, D0;
endmodule // BMXIT_X0P7M_A12TR
`endcelldefine

`celldefine
module BMXIT_X1M_A12TR (PPN, X2, AN, SN, D1, D0);
output PPN;
input X2, AN, SN, D1, D0;
endmodule // BMXIT_X1M_A12TR
`endcelldefine

`celldefine
module BMXIT_X1P4M_A12TR (PPN, X2, AN, SN, D1, D0);
output PPN;
input X2, AN, SN, D1, D0;
endmodule // BMXIT_X1P4M_A12TR
`endcelldefine

`celldefine
module BMXIT_X2M_A12TR (PPN, X2, AN, SN, D1, D0);
output PPN;
input X2, AN, SN, D1, D0;
endmodule // BMXIT_X2M_A12TR
`endcelldefine

`celldefine
module BMXT_X0P7M_A12TR (PP, X2, AN, SN, D1, D0);
output PP;
input X2, AN, SN, D1, D0;
endmodule // BMXT_X0P7M_A12TR
`endcelldefine

`celldefine
module BMXT_X1M_A12TR (PP, X2, AN, SN, D1, D0);
output PP;
input X2, AN, SN, D1, D0;
endmodule // BMXT_X1M_A12TR
`endcelldefine

`celldefine
module BMXT_X1P4M_A12TR (PP, X2, AN, SN, D1, D0);
output PP;
input X2, AN, SN, D1, D0;
endmodule // BMXT_X1P4M_A12TR
`endcelldefine

`celldefine
module BMXT_X2M_A12TR (PP, X2, AN, SN, D1, D0);
output PP;
input X2, AN, SN, D1, D0;
endmodule // BMXT_X2M_A12TR
`endcelldefine

`celldefine
module CGEN_X1M_A12TR ( CO, A, B, CI);
output CO;
input A, B, CI;
endmodule // CGEN_X1M_A12TR
`endcelldefine

`celldefine
module CGEN_X1P4M_A12TR ( CO, A, B, CI);
output CO;
input A, B, CI;
endmodule // CGEN_X1P4M_A12TR
`endcelldefine

`celldefine
module CGEN_X2M_A12TR ( CO, A, B, CI);
output CO;
input A, B, CI;
endmodule // CGEN_X2M_A12TR
`endcelldefine

`celldefine
module CGENCIN_X1M_A12TR ( CO, A, B, CIN);
output CO;
input A, B, CIN;
endmodule // CGENCIN_X1M_A12TR
`endcelldefine

`celldefine
module CGENCIN_X1P4M_A12TR ( CO, A, B, CIN);
output CO;
input A, B, CIN;
endmodule // CGENCIN_X1P4M_A12TR
`endcelldefine

`celldefine
module CGENCIN_X2M_A12TR ( CO, A, B, CIN);
output CO;
input A, B, CIN;
endmodule // CGENCIN_X2M_A12TR
`endcelldefine

`celldefine
module CGENCON_X1M_A12TR ( CON, A, B, CI);
output CON;
input A, B, CI;
endmodule // CGENCON_X1M_A12TR
`endcelldefine

`celldefine
module CGENCON_X1P4M_A12TR ( CON, A, B, CI);
output CON;
input A, B, CI;
endmodule // CGENCON_X1P4M_A12TR
`endcelldefine

`celldefine
module CGENCON_X2M_A12TR ( CON, A, B, CI);
output CON;
input A, B, CI;
endmodule // CGENCON_X2M_A12TR
`endcelldefine

`celldefine
module CGENI_X1M_A12TR ( CON, A, B, CI);
output CON;
input A, B, CI;
endmodule // CGENI_X1M_A12TR
`endcelldefine

`celldefine
module CGENI_X1P4M_A12TR ( CON, A, B, CI);
output CON;
input A, B, CI;
endmodule // CGENI_X1P4M_A12TR
`endcelldefine

`celldefine
module CGENI_X2M_A12TR ( CON, A, B, CI);
output CON;
input A, B, CI;
endmodule // CGENI_X2M_A12TR
`endcelldefine

`celldefine
module CMPR42_X1M_A12TR (SUM, CO, ICO, A, B, C, D, ICI);
output SUM, CO, ICO;
input A, B, C, D, ICI;
endmodule // CMPR42_X1M_A12TR
`endcelldefine

`celldefine
module CMPR42_X1P4M_A12TR (SUM, CO, ICO, A, B, C, D, ICI);
output SUM, CO, ICO;
input A, B, C, D, ICI;
endmodule // CMPR42_X1P4M_A12TR
`endcelldefine

`celldefine
module CMPR42_X2M_A12TR (SUM, CO, ICO, A, B, C, D, ICI);
output SUM, CO, ICO;
input A, B, C, D, ICI;
endmodule // CMPR42_X2M_A12TR
`endcelldefine

`celldefine
module BUF_X0P7M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X0P7M_A12TR
`endcelldefine

`celldefine
module BUF_X0P7B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X0P7B_A12TR
`endcelldefine

`celldefine
module BUF_X0P8M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X0P8M_A12TR
`endcelldefine

`celldefine
module BUF_X0P8B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X0P8B_A12TR
`endcelldefine

`celldefine
module BUF_X11M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X11M_A12TR
`endcelldefine

`celldefine
module BUF_X11B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X11B_A12TR
`endcelldefine

`celldefine
module BUF_X13M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X13M_A12TR
`endcelldefine

`celldefine
module BUF_X13B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X13B_A12TR
`endcelldefine

`celldefine
module BUF_X16M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X16M_A12TR
`endcelldefine

`celldefine
module BUF_X16B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X16B_A12TR
`endcelldefine

`celldefine
module BUF_X1M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1M_A12TR
`endcelldefine

`celldefine
module BUF_X1B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1B_A12TR
`endcelldefine

`celldefine
module BUF_X1P2M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1P2M_A12TR
`endcelldefine

`celldefine
module BUF_X1P2B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1P2B_A12TR
`endcelldefine

`celldefine
module BUF_X1P4M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1P4M_A12TR
`endcelldefine

`celldefine
module BUF_X1P4B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1P4B_A12TR
`endcelldefine

`celldefine
module BUF_X1P7M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1P7M_A12TR
`endcelldefine

`celldefine
module BUF_X1P7B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X1P7B_A12TR
`endcelldefine

`celldefine
module BUF_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X2M_A12TR
`endcelldefine

`celldefine
module BUF_X2B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X2B_A12TR
`endcelldefine

`celldefine
module BUF_X2P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X2P5M_A12TR
`endcelldefine

`celldefine
module BUF_X2P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X2P5B_A12TR
`endcelldefine

`celldefine
module BUF_X3M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X3M_A12TR
`endcelldefine

`celldefine
module BUF_X3B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X3B_A12TR
`endcelldefine

`celldefine
module BUF_X3P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X3P5M_A12TR
`endcelldefine

`celldefine
module BUF_X3P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X3P5B_A12TR
`endcelldefine

`celldefine
module BUF_X4M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X4M_A12TR
`endcelldefine

`celldefine
module BUF_X4B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X4B_A12TR
`endcelldefine

`celldefine
module BUF_X5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X5M_A12TR
`endcelldefine

`celldefine
module BUF_X5B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X5B_A12TR
`endcelldefine

`celldefine
module BUF_X6M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X6M_A12TR
`endcelldefine

`celldefine
module BUF_X6B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X6B_A12TR
`endcelldefine

`celldefine
module BUF_X7P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X7P5M_A12TR
`endcelldefine

`celldefine
module BUF_X7P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X7P5B_A12TR
`endcelldefine

`celldefine
module BUF_X9M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X9M_A12TR
`endcelldefine

`celldefine
module BUF_X9B_A12TR ( Y, A );
output Y;
input A;
endmodule // BUF_X9B_A12TR
`endcelldefine

`celldefine
module BUFH_X0P7M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X0P7M_A12TR
`endcelldefine

`celldefine
module BUFH_X0P8M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X0P8M_A12TR
`endcelldefine

`celldefine
module BUFH_X11M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X11M_A12TR
`endcelldefine

`celldefine
module BUFH_X13M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X13M_A12TR
`endcelldefine

`celldefine
module BUFH_X16M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X16M_A12TR
`endcelldefine

`celldefine
module BUFH_X1M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X1M_A12TR
`endcelldefine

`celldefine
module BUFH_X1P2M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X1P2M_A12TR
`endcelldefine

`celldefine
module BUFH_X1P4M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X1P4M_A12TR
`endcelldefine

`celldefine
module BUFH_X1P7M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X1P7M_A12TR
`endcelldefine

`celldefine
module BUFH_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X2M_A12TR
`endcelldefine

`celldefine
module BUFH_X2P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X2P5M_A12TR
`endcelldefine

`celldefine
module BUFH_X3M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X3M_A12TR
`endcelldefine

`celldefine
module BUFH_X3P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X3P5M_A12TR
`endcelldefine

`celldefine
module BUFH_X4M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X4M_A12TR
`endcelldefine

`celldefine
module BUFH_X5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X5M_A12TR
`endcelldefine

`celldefine
module BUFH_X6M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X6M_A12TR
`endcelldefine

`celldefine
module BUFH_X7P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X7P5M_A12TR
`endcelldefine

`celldefine
module BUFH_X9M_A12TR ( Y, A );
output Y;
input A;
endmodule // BUFH_X9M_A12TR
`endcelldefine

`celldefine
module DLY2_X0P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2_X0P5M_A12TR
`endcelldefine

`celldefine
module DLY4_X0P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY4_X0P5M_A12TR
`endcelldefine

`celldefine
module DLY2S1_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S1_X2M_A12TR
`endcelldefine

`celldefine
module DLY2S2_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S2_X2M_A12TR
`endcelldefine

`celldefine
module DLY2S3_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S3_X2M_A12TR
`endcelldefine

`celldefine
module DLY2S4_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S4_X2M_A12TR
`endcelldefine

`celldefine
module DLY2S2_X3M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S2_X3M_A12TR
`endcelldefine

`celldefine
module DLY2S3_X3M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S3_X3M_A12TR
`endcelldefine

`celldefine
module DLY2S4_X3M_A12TR ( Y, A );
output Y;
input A;
endmodule // DLY2S4_X3M_A12TR
`endcelldefine

`celldefine
module INV_X0P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P5M_A12TR
`endcelldefine

`celldefine
module INV_X0P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P5B_A12TR
`endcelldefine

`celldefine
module INV_X0P6M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P6M_A12TR
`endcelldefine

`celldefine
module INV_X0P6B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P6B_A12TR
`endcelldefine

`celldefine
module INV_X0P7M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P7M_A12TR
`endcelldefine

`celldefine
module INV_X0P7B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P7B_A12TR
`endcelldefine

`celldefine
module INV_X0P8M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P8M_A12TR
`endcelldefine

`celldefine
module INV_X0P8B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X0P8B_A12TR
`endcelldefine

`celldefine
module INV_X11M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X11M_A12TR
`endcelldefine

`celldefine
module INV_X11B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X11B_A12TR
`endcelldefine

`celldefine
module INV_X13M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X13M_A12TR
`endcelldefine

`celldefine
module INV_X13B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X13B_A12TR
`endcelldefine

`celldefine
module INV_X16M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X16M_A12TR
`endcelldefine

`celldefine
module INV_X16B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X16B_A12TR
`endcelldefine

`celldefine
module INV_X1M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1M_A12TR
`endcelldefine

`celldefine
module INV_X1B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1B_A12TR
`endcelldefine

`celldefine
module INV_X1P2M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1P2M_A12TR
`endcelldefine

`celldefine
module INV_X1P2B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1P2B_A12TR
`endcelldefine

`celldefine
module INV_X1P4M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1P4M_A12TR
`endcelldefine

`celldefine
module INV_X1P4B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1P4B_A12TR
`endcelldefine

`celldefine
module INV_X1P7M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1P7M_A12TR
`endcelldefine

`celldefine
module INV_X1P7B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X1P7B_A12TR
`endcelldefine

`celldefine
module INV_X2M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X2M_A12TR
`endcelldefine

`celldefine
module INV_X2B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X2B_A12TR
`endcelldefine

`celldefine
module INV_X2P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X2P5M_A12TR
`endcelldefine

`celldefine
module INV_X2P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X2P5B_A12TR
`endcelldefine

`celldefine
module INV_X3M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X3M_A12TR
`endcelldefine

`celldefine
module INV_X3B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X3B_A12TR
`endcelldefine

`celldefine
module INV_X3P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X3P5M_A12TR
`endcelldefine

`celldefine
module INV_X3P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X3P5B_A12TR
`endcelldefine

`celldefine
module INV_X4M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X4M_A12TR
`endcelldefine

`celldefine
module INV_X4B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X4B_A12TR
`endcelldefine

`celldefine
module INV_X5M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X5M_A12TR
`endcelldefine

`celldefine
module INV_X5B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X5B_A12TR
`endcelldefine

`celldefine
module INV_X6M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X6M_A12TR
`endcelldefine

`celldefine
module INV_X6B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X6B_A12TR
`endcelldefine

`celldefine
module INV_X7P5M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X7P5M_A12TR
`endcelldefine

`celldefine
module INV_X7P5B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X7P5B_A12TR
`endcelldefine

`celldefine
module INV_X9M_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X9M_A12TR
`endcelldefine

`celldefine
module INV_X9B_A12TR ( Y, A );
output Y;
input A;
endmodule // INV_X9B_A12TR
`endcelldefine

`celldefine
module BUFZ_X11M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X11M_A12TR
`endcelldefine

`celldefine
module BUFZ_X16M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X16M_A12TR
`endcelldefine

`celldefine
module BUFZ_X1M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X1M_A12TR
`endcelldefine

`celldefine
module BUFZ_X1P4M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X1P4M_A12TR
`endcelldefine

`celldefine
module BUFZ_X2M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X2M_A12TR
`endcelldefine

`celldefine
module BUFZ_X3M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X3M_A12TR
`endcelldefine

`celldefine
module BUFZ_X4M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X4M_A12TR
`endcelldefine

`celldefine
module BUFZ_X6M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X6M_A12TR
`endcelldefine

`celldefine
module BUFZ_X8M_A12TR ( Y, A, OE );
output Y;
input A, OE;
endmodule // BUFZ_X8M_A12TR
`endcelldefine

`celldefine
module DFFQ_X0P5M_A12TR (Q, D, CK);
output Q;
input  D, CK;
endmodule // DFFQ_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFQ_X1M_A12TR (Q, D, CK);
output Q;
input  D, CK;
endmodule // DFFQ_X1M_A12TR
`endcelldefine

`celldefine
module DFFQ_X2M_A12TR (Q, D, CK);
output Q;
input  D, CK;
endmodule // DFFQ_X2M_A12TR
`endcelldefine

`celldefine
module DFFQ_X3M_A12TR (Q, D, CK);
output Q;
input  D, CK;
endmodule // DFFQ_X3M_A12TR
`endcelldefine

`celldefine
module DFFQ_X4M_A12TR (Q, D, CK);
output Q;
input  D, CK;
endmodule // DFFQ_X4M_A12TR
`endcelldefine

`celldefine
module DFFRPQ_X0P5M_A12TR (Q, D, CK, R);
output Q;
input  D, CK, R;
endmodule // DFFRPQ_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFRPQ_X1M_A12TR (Q, D, CK, R);
output Q;
input  D, CK, R;
endmodule // DFFRPQ_X1M_A12TR
`endcelldefine

`celldefine
module DFFRPQ_X2M_A12TR (Q, D, CK, R);
output Q;
input  D, CK, R;
endmodule // DFFRPQ_X2M_A12TR
`endcelldefine

`celldefine
module DFFRPQ_X3M_A12TR (Q, D, CK, R);
output Q;
input  D, CK, R;
endmodule // DFFRPQ_X3M_A12TR
`endcelldefine

`celldefine
module DFFRPQ_X4M_A12TR (Q, D, CK, R);
output Q;
input  D, CK, R;
endmodule // DFFRPQ_X4M_A12TR
`endcelldefine

`celldefine
module DFFSQ_X0P5M_A12TR (Q, D, CK, SN);
output Q;
input  D, CK, SN;
endmodule // DFFSQ_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFSQ_X1M_A12TR (Q, D, CK, SN);
output Q;
input  D, CK, SN;
endmodule // DFFSQ_X1M_A12TR
`endcelldefine

`celldefine
module DFFSQ_X2M_A12TR (Q, D, CK, SN);
output Q;
input  D, CK, SN;
endmodule // DFFSQ_X2M_A12TR
`endcelldefine

`celldefine
module DFFSQ_X3M_A12TR (Q, D, CK, SN);
output Q;
input  D, CK, SN;
endmodule // DFFSQ_X3M_A12TR
`endcelldefine

`celldefine
module DFFSQ_X4M_A12TR (Q, D, CK, SN);
output Q;
input  D, CK, SN;
endmodule // DFFSQ_X4M_A12TR
`endcelldefine

`celldefine
module DFFSRPQ_X0P5M_A12TR (Q, D, CK, SN, R);
output Q;
input  D, CK, SN, R;
endmodule // DFFSRPQ_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFSRPQ_X1M_A12TR (Q, D, CK, SN, R);
output Q;
input  D, CK, SN, R;
endmodule // DFFSRPQ_X1M_A12TR
`endcelldefine

`celldefine
module DFFSRPQ_X2M_A12TR (Q, D, CK, SN, R);
output Q;
input  D, CK, SN, R;
endmodule // DFFSRPQ_X2M_A12TR
`endcelldefine

`celldefine
module DFFSRPQ_X3M_A12TR (Q, D, CK, SN, R);
output Q;
input  D, CK, SN, R;
endmodule // DFFSRPQ_X3M_A12TR
`endcelldefine

`celldefine
module DFFSRPQ_X4M_A12TR (Q, D, CK, SN, R);
output Q;
input  D, CK, SN, R;
endmodule // DFFSRPQ_X4M_A12TR
`endcelldefine

`celldefine
module DFFQN_X0P5M_A12TR (QN, D, CK);
output QN;
input  D, CK;
endmodule // DFFQN_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFQN_X1M_A12TR (QN, D, CK);
output QN;
input  D, CK;
endmodule // DFFQN_X1M_A12TR
`endcelldefine

`celldefine
module DFFQN_X2M_A12TR (QN, D, CK);
output QN;
input  D, CK;
endmodule // DFFQN_X2M_A12TR
`endcelldefine

`celldefine
module DFFQN_X3M_A12TR (QN, D, CK);
output QN;
input  D, CK;
endmodule // DFFQN_X3M_A12TR
`endcelldefine

`celldefine
module DFFRPQN_X0P5M_A12TR (QN, D, CK, R);
output QN;
input  D, CK, R;
endmodule // DFFRPQN_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFRPQN_X1M_A12TR (QN, D, CK, R);
output QN;
input  D, CK, R;
endmodule // DFFRPQN_X1M_A12TR
`endcelldefine

`celldefine
module DFFRPQN_X2M_A12TR (QN, D, CK, R);
output QN;
input  D, CK, R;
endmodule // DFFRPQN_X2M_A12TR
`endcelldefine

`celldefine
module DFFRPQN_X3M_A12TR (QN, D, CK, R);
output QN;
input  D, CK, R;
endmodule // DFFRPQN_X3M_A12TR
`endcelldefine

`celldefine
module DFFSQN_X0P5M_A12TR (QN, D, CK, SN);
output QN;
input  D, CK, SN;
endmodule // DFFSQN_X0P5M_A12TR
`endcelldefine

`celldefine
module DFFSQN_X1M_A12TR (QN, D, CK, SN);
output QN;
input  D, CK, SN;
endmodule // DFFSQN_X1M_A12TR
`endcelldefine

`celldefine
module DFFSQN_X2M_A12TR (QN, D, CK, SN);
output QN;
input  D, CK, SN;
endmodule // DFFSQN_X2M_A12TR
`endcelldefine

`celldefine
module DFFSQN_X3M_A12TR (QN, D, CK, SN);
output QN;
input  D, CK, SN;
endmodule // DFFSQN_X3M_A12TR
`endcelldefine

`celldefine
module DFFNQ_X1M_A12TR (Q, D, CKN);
output Q;
input  D, CKN;
endmodule // DFFNQ_X1M_A12TR
`endcelldefine

`celldefine
module DFFNQ_X2M_A12TR (Q, D, CKN);
output Q;
input  D, CKN;
endmodule // DFFNQ_X2M_A12TR
`endcelldefine

`celldefine
module DFFNQ_X3M_A12TR (Q, D, CKN);
output Q;
input  D, CKN;
endmodule // DFFNQ_X3M_A12TR
`endcelldefine

`celldefine
module DFFNSRPQ_X1M_A12TR (Q, D, CKN, SN, R);
output Q;
input  D, CKN, SN, R;
endmodule // DFFNSRPQ_X1M_A12TR
`endcelldefine

`celldefine
module DFFNSRPQ_X2M_A12TR (Q, D, CKN, SN, R);
output Q;
input  D, CKN, SN, R;
endmodule // DFFNSRPQ_X2M_A12TR
`endcelldefine

`celldefine
module DFFNSRPQ_X3M_A12TR (Q, D, CKN, SN, R);
output Q;
input  D, CKN, SN, R;
endmodule // DFFNSRPQ_X3M_A12TR
`endcelldefine

`celldefine
module FRICG_X0P5B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X0P5B_A12TR
`endcelldefine

`celldefine
module FRICG_X0P6B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X0P6B_A12TR
`endcelldefine

`celldefine
module FRICG_X0P7B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X0P7B_A12TR
`endcelldefine

`celldefine
module FRICG_X0P8B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X0P8B_A12TR
`endcelldefine

`celldefine
module FRICG_X11B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X11B_A12TR
`endcelldefine

`celldefine
module FRICG_X13B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X13B_A12TR
`endcelldefine

`celldefine
module FRICG_X16B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X16B_A12TR
`endcelldefine

`celldefine
module FRICG_X1B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X1B_A12TR
`endcelldefine

`celldefine
module FRICG_X1P2B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X1P2B_A12TR
`endcelldefine

`celldefine
module FRICG_X1P4B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X1P4B_A12TR
`endcelldefine

`celldefine
module FRICG_X1P7B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X1P7B_A12TR
`endcelldefine

`celldefine
module FRICG_X2B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X2B_A12TR
`endcelldefine

`celldefine
module FRICG_X2P5B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X2P5B_A12TR
`endcelldefine

`celldefine
module FRICG_X3B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X3B_A12TR
`endcelldefine

`celldefine
module FRICG_X3P5B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X3P5B_A12TR
`endcelldefine

`celldefine
module FRICG_X4B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X4B_A12TR
`endcelldefine

`celldefine
module FRICG_X5B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X5B_A12TR
`endcelldefine

`celldefine
module FRICG_X6B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X6B_A12TR
`endcelldefine

`celldefine
module FRICG_X7P5B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X7P5B_A12TR
`endcelldefine

`celldefine
module FRICG_X9B_A12TR ( ECK, CK );
output ECK;
input CK;
endmodule // FRICG_X9B_A12TR
`endcelldefine

`celldefine
module PREICG_X0P5B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X0P5B_A12TR
`endcelldefine

`celldefine
module PREICG_X0P6B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X0P6B_A12TR
`endcelldefine

`celldefine
module PREICG_X0P7B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X0P7B_A12TR
`endcelldefine

`celldefine
module PREICG_X0P8B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X0P8B_A12TR
`endcelldefine

`celldefine
module PREICG_X11B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X11B_A12TR
`endcelldefine

`celldefine
module PREICG_X13B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X13B_A12TR
`endcelldefine

`celldefine
module PREICG_X16B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X16B_A12TR
`endcelldefine

`celldefine
module PREICG_X1B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X1B_A12TR
`endcelldefine

`celldefine
module PREICG_X1P2B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X1P2B_A12TR
`endcelldefine

`celldefine
module PREICG_X1P4B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X1P4B_A12TR
`endcelldefine

`celldefine
module PREICG_X1P7B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X1P7B_A12TR
`endcelldefine

`celldefine
module PREICG_X2B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X2B_A12TR
`endcelldefine

`celldefine
module PREICG_X2P5B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X2P5B_A12TR
`endcelldefine

`celldefine
module PREICG_X3B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X3B_A12TR
`endcelldefine

`celldefine
module PREICG_X3P5B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X3P5B_A12TR
`endcelldefine

`celldefine
module PREICG_X4B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X4B_A12TR
`endcelldefine

`celldefine
module PREICG_X5B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X5B_A12TR
`endcelldefine

`celldefine
module PREICG_X6B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X6B_A12TR
`endcelldefine

`celldefine
module PREICG_X7P5B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X7P5B_A12TR
`endcelldefine

`celldefine
module PREICG_X9B_A12TR (ECK, E, SE, CK);
output ECK;
input  E, SE, CK;
endmodule //PREICG_X9B_A12TR
`endcelldefine

`celldefine
module POSTICG_X0P5B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X0P5B_A12TR
`endcelldefine

`celldefine
module POSTICG_X0P6B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X0P6B_A12TR
`endcelldefine

`celldefine
module POSTICG_X0P7B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X0P7B_A12TR
`endcelldefine

`celldefine
module POSTICG_X0P8B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X0P8B_A12TR
`endcelldefine

`celldefine
module POSTICG_X11B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X11B_A12TR
`endcelldefine

`celldefine
module POSTICG_X13B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X13B_A12TR
`endcelldefine

`celldefine
module POSTICG_X16B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X16B_A12TR
`endcelldefine

`celldefine
module POSTICG_X1B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X1B_A12TR
`endcelldefine

`celldefine
module POSTICG_X1P2B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X1P2B_A12TR
`endcelldefine

`celldefine
module POSTICG_X1P4B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X1P4B_A12TR
`endcelldefine

`celldefine
module POSTICG_X1P7B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X1P7B_A12TR
`endcelldefine

`celldefine
module POSTICG_X2B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X2B_A12TR
`endcelldefine

`celldefine
module POSTICG_X2P5B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X2P5B_A12TR
`endcelldefine

`celldefine
module POSTICG_X3B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X3B_A12TR
`endcelldefine

`celldefine
module POSTICG_X3P5B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X3P5B_A12TR
`endcelldefine

`celldefine
module POSTICG_X4B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X4B_A12TR
`endcelldefine

`celldefine
module POSTICG_X5B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X5B_A12TR
`endcelldefine

`celldefine
module POSTICG_X6B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X6B_A12TR
`endcelldefine

`celldefine
module POSTICG_X7P5B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X7P5B_A12TR
`endcelldefine

`celldefine
module POSTICG_X9B_A12TR (ECK, E, SEN, CK);
output ECK;
input  E, SEN, CK;
endmodule //POSTICG_X9B_A12TR
`endcelldefine

`celldefine
module LATQ_X0P5M_A12TR (Q, D, G);
output  Q;
input  D, G;
endmodule //LATQ_X0P5M_A12TR
`endcelldefine

`celldefine
module LATQ_X1M_A12TR (Q, D, G);
output  Q;
input  D, G;
endmodule //LATQ_X1M_A12TR
`endcelldefine

`celldefine
module LATQ_X2M_A12TR (Q, D, G);
output  Q;
input  D, G;
endmodule //LATQ_X2M_A12TR
`endcelldefine

`celldefine
module LATQ_X3M_A12TR (Q, D, G);
output  Q;
input  D, G;
endmodule //LATQ_X3M_A12TR
`endcelldefine

`celldefine
module LATRQ_X0P5M_A12TR (Q, D, G, RN);
output  Q;
input  D, G, RN;
endmodule //LATRQ_X0P5M_A12TR
`endcelldefine

`celldefine
module LATRQ_X1M_A12TR (Q, D, G, RN);
output  Q;
input  D, G, RN;
endmodule //LATRQ_X1M_A12TR
`endcelldefine

`celldefine
module LATRQ_X2M_A12TR (Q, D, G, RN);
output  Q;
input  D, G, RN;
endmodule //LATRQ_X2M_A12TR
`endcelldefine

`celldefine
module LATRQ_X3M_A12TR (Q, D, G, RN);
output  Q;
input  D, G, RN;
endmodule //LATRQ_X3M_A12TR
`endcelldefine

`celldefine
module LATSPQ_X0P5M_A12TR (Q, D, G, S);
output  Q;
input  D, G, S;
endmodule //LATSPQ_X0P5M_A12TR
`endcelldefine

`celldefine
module LATSPQ_X1M_A12TR (Q, D, G, S);
output  Q;
input  D, G, S;
endmodule //LATSPQ_X1M_A12TR
`endcelldefine

`celldefine
module LATSPQ_X2M_A12TR (Q, D, G, S);
output  Q;
input  D, G, S;
endmodule //LATSPQ_X2M_A12TR
`endcelldefine

`celldefine
module LATSPQ_X3M_A12TR (Q, D, G, S);
output  Q;
input  D, G, S;
endmodule //LATSPQ_X3M_A12TR
`endcelldefine

`celldefine
module LATQN_X0P5M_A12TR (QN, D, G);
output  QN;
input  D, G;
endmodule //LATQN_X0P5M_A12TR
`endcelldefine

`celldefine
module LATQN_X1M_A12TR (QN, D, G);
output  QN;
input  D, G;
endmodule //LATQN_X1M_A12TR
`endcelldefine

`celldefine
module LATQN_X2M_A12TR (QN, D, G);
output  QN;
input  D, G;
endmodule //LATQN_X2M_A12TR
`endcelldefine

`celldefine
module LATQN_X3M_A12TR (QN, D, G);
output  QN;
input  D, G;
endmodule //LATQN_X3M_A12TR
`endcelldefine

`celldefine
module LATQN_X4M_A12TR (QN, D, G);
output  QN;
input  D, G;
endmodule //LATQN_X4M_A12TR
`endcelldefine

`celldefine
module LATRPQN_X0P5M_A12TR (QN, D, G, R);
output  QN;
input  D, G, R;
endmodule //LATRPQN_X0P5M_A12TR
`endcelldefine

`celldefine
module LATRPQN_X1M_A12TR (QN, D, G, R);
output  QN;
input  D, G, R;
endmodule //LATRPQN_X1M_A12TR
`endcelldefine

`celldefine
module LATRPQN_X2M_A12TR (QN, D, G, R);
output  QN;
input  D, G, R;
endmodule //LATRPQN_X2M_A12TR
`endcelldefine

`celldefine
module LATRPQN_X3M_A12TR (QN, D, G, R);
output  QN;
input  D, G, R;
endmodule //LATRPQN_X3M_A12TR
`endcelldefine

`celldefine
module LATRPQN_X4M_A12TR (QN, D, G, R);
output  QN;
input  D, G, R;
endmodule //LATRPQN_X4M_A12TR
`endcelldefine

`celldefine
module LATSQN_X0P5M_A12TR (QN, D, G, SN);
output  QN;
input  D, G, SN;
endmodule //LATSQN_X0P5M_A12TR
`endcelldefine

`celldefine
module LATSQN_X1M_A12TR (QN, D, G, SN);
output  QN;
input  D, G, SN;
endmodule //LATSQN_X1M_A12TR
`endcelldefine

`celldefine
module LATSQN_X2M_A12TR (QN, D, G, SN);
output  QN;
input  D, G, SN;
endmodule //LATSQN_X2M_A12TR
`endcelldefine

`celldefine
module LATSQN_X3M_A12TR (QN, D, G, SN);
output  QN;
input  D, G, SN;
endmodule //LATSQN_X3M_A12TR
`endcelldefine

`celldefine
module LATSQN_X4M_A12TR (QN, D, G, SN);
output  QN;
input  D, G, SN;
endmodule //LATSQN_X4M_A12TR
`endcelldefine

`celldefine
module LATNQ_X0P5M_A12TR (Q, D, GN);
output  Q;
input  D, GN;
endmodule //LATNQ_X0P5M_A12TR
`endcelldefine

`celldefine
module LATNQ_X1M_A12TR (Q, D, GN);
output  Q;
input  D, GN;
endmodule //LATNQ_X1M_A12TR
`endcelldefine

`celldefine
module LATNQ_X2M_A12TR (Q, D, GN);
output  Q;
input  D, GN;
endmodule //LATNQ_X2M_A12TR
`endcelldefine

`celldefine
module LATNQ_X3M_A12TR (Q, D, GN);
output  Q;
input  D, GN;
endmodule //LATNQ_X3M_A12TR
`endcelldefine

`celldefine
module LATNRQ_X0P5M_A12TR (Q, D, GN, RN);
output  Q;
input  D, GN, RN;
endmodule //LATNRQ_X0P5M_A12TR
`endcelldefine

`celldefine
module LATNRQ_X1M_A12TR (Q, D, GN, RN);
output  Q;
input  D, GN, RN;
endmodule //LATNRQ_X1M_A12TR
`endcelldefine

`celldefine
module LATNRQ_X2M_A12TR (Q, D, GN, RN);
output  Q;
input  D, GN, RN;
endmodule //LATNRQ_X2M_A12TR
`endcelldefine

`celldefine
module LATNRQ_X3M_A12TR (Q, D, GN, RN);
output  Q;
input  D, GN, RN;
endmodule //LATNRQ_X3M_A12TR
`endcelldefine

`celldefine
module LATNSPQ_X0P5M_A12TR (Q, D, GN, S);
output  Q;
input  D, GN, S;
endmodule //LATNSPQ_X0P5M_A12TR
`endcelldefine

`celldefine
module LATNSPQ_X1M_A12TR (Q, D, GN, S);
output  Q;
input  D, GN, S;
endmodule //LATNSPQ_X1M_A12TR
`endcelldefine

`celldefine
module LATNSPQ_X2M_A12TR (Q, D, GN, S);
output  Q;
input  D, GN, S;
endmodule //LATNSPQ_X2M_A12TR
`endcelldefine

`celldefine
module LATNSPQ_X3M_A12TR (Q, D, GN, S);
output  Q;
input  D, GN, S;
endmodule //LATNSPQ_X3M_A12TR
`endcelldefine

`celldefine
module LATNQN_X0P5M_A12TR (QN, D, GN);
output  QN;
input  D, GN;
endmodule //LATNQN_X0P5M_A12TR
`endcelldefine

`celldefine
module LATNQN_X1M_A12TR (QN, D, GN);
output  QN;
input  D, GN;
endmodule //LATNQN_X1M_A12TR
`endcelldefine

`celldefine
module LATNQN_X2M_A12TR (QN, D, GN);
output  QN;
input  D, GN;
endmodule //LATNQN_X2M_A12TR
`endcelldefine

`celldefine
module LATNQN_X3M_A12TR (QN, D, GN);
output  QN;
input  D, GN;
endmodule //LATNQN_X3M_A12TR
`endcelldefine

`celldefine
module LATNQN_X4M_A12TR (QN, D, GN);
output  QN;
input  D, GN;
endmodule //LATNQN_X4M_A12TR
`endcelldefine

`celldefine
module LATNRPQN_X0P5M_A12TR (QN, D, GN, R);
output  QN;
input  D, GN, R;
endmodule //LATNRPQN_X0P5M_A12TR
`endcelldefine

`celldefine
module LATNRPQN_X1M_A12TR (QN, D, GN, R);
output  QN;
input  D, GN, R;
endmodule //LATNRPQN_X1M_A12TR
`endcelldefine

`celldefine
module LATNRPQN_X2M_A12TR (QN, D, GN, R);
output  QN;
input  D, GN, R;
endmodule //LATNRPQN_X2M_A12TR
`endcelldefine

`celldefine
module LATNRPQN_X3M_A12TR (QN, D, GN, R);
output  QN;
input  D, GN, R;
endmodule //LATNRPQN_X3M_A12TR
`endcelldefine

`celldefine
module LATNRPQN_X4M_A12TR (QN, D, GN, R);
output  QN;
input  D, GN, R;
endmodule //LATNRPQN_X4M_A12TR
`endcelldefine

`celldefine
module LATNSQN_X0P5M_A12TR (QN, D, GN, SN);
output  QN;
input  D, GN, SN;
endmodule //LATNSQN_X0P5M_A12TR
`endcelldefine

`celldefine
module LATNSQN_X1M_A12TR (QN, D, GN, SN);
output  QN;
input  D, GN, SN;
endmodule //LATNSQN_X1M_A12TR
`endcelldefine

`celldefine
module LATNSQN_X2M_A12TR (QN, D, GN, SN);
output  QN;
input  D, GN, SN;
endmodule //LATNSQN_X2M_A12TR
`endcelldefine

`celldefine
module LATNSQN_X3M_A12TR (QN, D, GN, SN);
output  QN;
input  D, GN, SN;
endmodule //LATNSQN_X3M_A12TR
`endcelldefine

`celldefine
module LATNSQN_X4M_A12TR (QN, D, GN, SN);
output  QN;
input  D, GN, SN;
endmodule //LATNSQN_X4M_A12TR
`endcelldefine

`celldefine
module MX2_X0P5B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X0P5B_A12TR
`endcelldefine

`celldefine
module MX2_X0P7B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X0P7B_A12TR
`endcelldefine

`celldefine
module MX2_X1B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X1B_A12TR
`endcelldefine

`celldefine
module MX2_X1P4B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X1P4B_A12TR
`endcelldefine

`celldefine
module MX2_X2B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X2B_A12TR
`endcelldefine

`celldefine
module MX2_X3B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X3B_A12TR
`endcelldefine

`celldefine
module MX2_X4B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X4B_A12TR
`endcelldefine

`celldefine
module MX2_X6B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X6B_A12TR
`endcelldefine

`celldefine
module MX2_X8B_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MX2_X8B_A12TR
`endcelldefine

`celldefine
module MXT2_X0P5M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X0P5M_A12TR
`endcelldefine

`celldefine
module MXT2_X0P7M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X0P7M_A12TR
`endcelldefine

`celldefine
module MXT2_X1M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X1M_A12TR
`endcelldefine

`celldefine
module MXT2_X1P4M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X1P4M_A12TR
`endcelldefine

`celldefine
module MXT2_X2M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X2M_A12TR
`endcelldefine

`celldefine
module MXT2_X3M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X3M_A12TR
`endcelldefine

`celldefine
module MXT2_X4M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X4M_A12TR
`endcelldefine

`celldefine
module MXT2_X6M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXT2_X6M_A12TR
`endcelldefine

`celldefine
module MXT4_X0P5M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXT4_X0P5M_A12TR
`endcelldefine

`celldefine
module MXT4_X0P7M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXT4_X0P7M_A12TR
`endcelldefine

`celldefine
module MXT4_X1M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXT4_X1M_A12TR
`endcelldefine

`celldefine
module MXT4_X1P4M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXT4_X1P4M_A12TR
`endcelldefine

`celldefine
module MXT4_X2M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXT4_X2M_A12TR
`endcelldefine

`celldefine
module MXT4_X3M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXT4_X3M_A12TR
`endcelldefine

`celldefine
module MXIT2_X0P5M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X0P5M_A12TR
`endcelldefine

`celldefine
module MXIT2_X0P7M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X0P7M_A12TR
`endcelldefine

`celldefine
module MXIT2_X1M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X1M_A12TR
`endcelldefine

`celldefine
module MXIT2_X1P4M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X1P4M_A12TR
`endcelldefine

`celldefine
module MXIT2_X2M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X2M_A12TR
`endcelldefine

`celldefine
module MXIT2_X3M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X3M_A12TR
`endcelldefine

`celldefine
module MXIT2_X4M_A12TR (Y, A, B, S0);
output Y;
input A, B, S0;
endmodule // MXIT2_X4M_A12TR
`endcelldefine

`celldefine
module MXIT4_X0P5M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXIT4_X0P5M_A12TR
`endcelldefine

`celldefine
module MXIT4_X0P7M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXIT4_X0P7M_A12TR
`endcelldefine

`celldefine
module MXIT4_X1M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXIT4_X1M_A12TR
`endcelldefine

`celldefine
module MXIT4_X1P4M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXIT4_X1P4M_A12TR
`endcelldefine

`celldefine
module MXIT4_X2M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXIT4_X2M_A12TR
`endcelldefine

`celldefine
module MXIT4_X3M_A12TR (Y, A, B, C, D, S0, S1);
output Y;
input A, B, C, D, S0, S1;
endmodule // MXIT4_X3M_A12TR
`endcelldefine

`celldefine
module OA211_X0P5M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X0P5M_A12TR
`endcelldefine

`celldefine
module OA211_X0P7M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X0P7M_A12TR
`endcelldefine

`celldefine
module OA211_X1M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X1M_A12TR
`endcelldefine

`celldefine
module OA211_X1P4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X1P4M_A12TR
`endcelldefine

`celldefine
module OA211_X2M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X2M_A12TR
`endcelldefine

`celldefine
module OA211_X3M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X3M_A12TR
`endcelldefine

`celldefine
module OA211_X4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X4M_A12TR
`endcelldefine

`celldefine
module OA211_X6M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OA211_X6M_A12TR
`endcelldefine

`celldefine
module OA21_X0P5M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X0P5M_A12TR
`endcelldefine

`celldefine
module OA21_X0P7M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X0P7M_A12TR
`endcelldefine

`celldefine
module OA21_X1M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X1M_A12TR
`endcelldefine

`celldefine
module OA21_X1P4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X1P4M_A12TR
`endcelldefine

`celldefine
module OA21_X2M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X2M_A12TR
`endcelldefine

`celldefine
module OA21_X3M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X3M_A12TR
`endcelldefine

`celldefine
module OA21_X4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X4M_A12TR
`endcelldefine

`celldefine
module OA21_X6M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X6M_A12TR
`endcelldefine

`celldefine
module OA21_X8M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OA21_X8M_A12TR
`endcelldefine

`celldefine
module OA22_X0P5M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X0P5M_A12TR
`endcelldefine

`celldefine
module OA22_X0P7M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X0P7M_A12TR
`endcelldefine

`celldefine
module OA22_X1M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X1M_A12TR
`endcelldefine

`celldefine
module OA22_X1P4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X1P4M_A12TR
`endcelldefine

`celldefine
module OA22_X2M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X2M_A12TR
`endcelldefine

`celldefine
module OA22_X3M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X3M_A12TR
`endcelldefine

`celldefine
module OA22_X4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X4M_A12TR
`endcelldefine

`celldefine
module OA22_X6M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X6M_A12TR
`endcelldefine

`celldefine
module OA22_X8M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OA22_X8M_A12TR
`endcelldefine

`celldefine
module OAI211_X0P5M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI211_X0P7M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI211_X1M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X1M_A12TR
`endcelldefine

`celldefine
module OAI211_X1P4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI211_X2M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X2M_A12TR
`endcelldefine

`celldefine
module OAI211_X3M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X3M_A12TR
`endcelldefine

`celldefine
module OAI211_X4M_A12TR (Y, A0, A1, B0, C0);
output Y;
input A0, A1, B0, C0;
endmodule // OAI211_X4M_A12TR
`endcelldefine

`celldefine
module OAI21_X0P5M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI21_X0P7M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI21_X1M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X1M_A12TR
`endcelldefine

`celldefine
module OAI21_X1P4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI21_X2M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X2M_A12TR
`endcelldefine

`celldefine
module OAI21_X3M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X3M_A12TR
`endcelldefine

`celldefine
module OAI21_X4M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X4M_A12TR
`endcelldefine

`celldefine
module OAI21_X6M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X6M_A12TR
`endcelldefine

`celldefine
module OAI21_X8M_A12TR (Y, A0, A1, B0);
output Y;
input A0, A1, B0;
endmodule // OAI21_X8M_A12TR
`endcelldefine

`celldefine
module OAI21B_X0P5M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI21B_X0P7M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI21B_X1M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X1M_A12TR
`endcelldefine

`celldefine
module OAI21B_X1P4M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI21B_X2M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X2M_A12TR
`endcelldefine

`celldefine
module OAI21B_X3M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X3M_A12TR
`endcelldefine

`celldefine
module OAI21B_X4M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X4M_A12TR
`endcelldefine

`celldefine
module OAI21B_X6M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X6M_A12TR
`endcelldefine

`celldefine
module OAI21B_X8M_A12TR (Y, A0, A1, B0N);
output Y;
input A0, A1, B0N;
endmodule // OAI21B_X8M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X0P5M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X0P7M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X1M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X1M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X1P4M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X2M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X2M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X3M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X3M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X4M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X4M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X6M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X6M_A12TR
`endcelldefine

`celldefine
module OAI2XB1_X8M_A12TR (Y, A0, A1N, B0);
output Y;
input A0, A1N, B0;
endmodule // OAI2XB1_X8M_A12TR
`endcelldefine

`celldefine
module OAI22_X0P5M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI22_X0P7M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI22_X1M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X1M_A12TR
`endcelldefine

`celldefine
module OAI22_X1P4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI22_X2M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X2M_A12TR
`endcelldefine

`celldefine
module OAI22_X3M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X3M_A12TR
`endcelldefine

`celldefine
module OAI22_X4M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X4M_A12TR
`endcelldefine

`celldefine
module OAI22_X6M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X6M_A12TR
`endcelldefine

`celldefine
module OAI22_X8M_A12TR (Y, A0, A1, B0, B1);
output Y;
input A0, A1, B0, B1;
endmodule // OAI22_X8M_A12TR
`endcelldefine

`celldefine
module OAI31_X0P5M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI31_X0P7M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI31_X1M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X1M_A12TR
`endcelldefine

`celldefine
module OAI31_X1P4M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI31_X2M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X2M_A12TR
`endcelldefine

`celldefine
module OAI31_X3M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X3M_A12TR
`endcelldefine

`celldefine
module OAI31_X4M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X4M_A12TR
`endcelldefine

`celldefine
module OAI31_X6M_A12TR (Y, A0, A1, A2, B0);
output Y;
input A0, A1, A2, B0;
endmodule // OAI31_X6M_A12TR
`endcelldefine

`celldefine
module OAI221_X0P5M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI221_X0P7M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI221_X1M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X1M_A12TR
`endcelldefine

`celldefine
module OAI221_X1P4M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI221_X2M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X2M_A12TR
`endcelldefine

`celldefine
module OAI221_X3M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X3M_A12TR
`endcelldefine

`celldefine
module OAI221_X4M_A12TR (Y, A0, A1, B0, B1, C0);
output Y;
input A0, A1, B0, B1, C0;
endmodule // OAI221_X4M_A12TR
`endcelldefine

`celldefine
module OAI222_X0P5M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X0P5M_A12TR
`endcelldefine

`celldefine
module OAI222_X0P7M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X0P7M_A12TR
`endcelldefine

`celldefine
module OAI222_X1M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X1M_A12TR
`endcelldefine

`celldefine
module OAI222_X1P4M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X1P4M_A12TR
`endcelldefine

`celldefine
module OAI222_X2M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X2M_A12TR
`endcelldefine

`celldefine
module OAI222_X3M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X3M_A12TR
`endcelldefine

`celldefine
module OAI222_X4M_A12TR (Y, A0, A1, B0, B1, C0, C1);
output Y;
input A0, A1, B0, B1, C0, C1;
endmodule // OAI222_X4M_A12TR
`endcelldefine

`celldefine
module NOR2_X0P5M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X0P5M_A12TR
`endcelldefine

`celldefine
module NOR2_X0P5A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X0P5A_A12TR
`endcelldefine

`celldefine
module NOR2_X0P7M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X0P7M_A12TR
`endcelldefine

`celldefine
module NOR2_X0P7A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X0P7A_A12TR
`endcelldefine

`celldefine
module NOR2_X1M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X1M_A12TR
`endcelldefine

`celldefine
module NOR2_X1A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X1A_A12TR
`endcelldefine

`celldefine
module NOR2_X1P4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X1P4M_A12TR
`endcelldefine

`celldefine
module NOR2_X1P4A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X1P4A_A12TR
`endcelldefine

`celldefine
module NOR2_X2M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X2M_A12TR
`endcelldefine

`celldefine
module NOR2_X2A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X2A_A12TR
`endcelldefine

`celldefine
module NOR2_X3M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X3M_A12TR
`endcelldefine

`celldefine
module NOR2_X3A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X3A_A12TR
`endcelldefine

`celldefine
module NOR2_X4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X4M_A12TR
`endcelldefine

`celldefine
module NOR2_X4A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X4A_A12TR
`endcelldefine

`celldefine
module NOR2_X6M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X6M_A12TR
`endcelldefine

`celldefine
module NOR2_X6A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X6A_A12TR
`endcelldefine

`celldefine
module NOR2_X8M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X8M_A12TR
`endcelldefine

`celldefine
module NOR2_X8A_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // NOR2_X8A_A12TR
`endcelldefine

`celldefine
module NOR2B_X0P5M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X0P5M_A12TR
`endcelldefine

`celldefine
module NOR2B_X0P7M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X0P7M_A12TR
`endcelldefine

`celldefine
module NOR2B_X1M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X1M_A12TR
`endcelldefine

`celldefine
module NOR2B_X1P4M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X1P4M_A12TR
`endcelldefine

`celldefine
module NOR2B_X2M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X2M_A12TR
`endcelldefine

`celldefine
module NOR2B_X3M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X3M_A12TR
`endcelldefine

`celldefine
module NOR2B_X4M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X4M_A12TR
`endcelldefine

`celldefine
module NOR2B_X6M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X6M_A12TR
`endcelldefine

`celldefine
module NOR2B_X8M_A12TR (Y, AN, B);
output Y;
input AN, B;
endmodule // NOR2B_X8M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X0P5M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X0P5M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X0P7M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X0P7M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X1M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X1M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X1P4M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X1P4M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X2M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X2M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X3M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X3M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X4M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X4M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X6M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X6M_A12TR
`endcelldefine

`celldefine
module NOR2XB_X8M_A12TR (Y, A, BN);
output Y;
input A, BN;
endmodule // NOR2XB_X8M_A12TR
`endcelldefine

`celldefine
module NOR3_X0P5M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X0P5M_A12TR
`endcelldefine

`celldefine
module NOR3_X0P5A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X0P5A_A12TR
`endcelldefine

`celldefine
module NOR3_X0P7M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X0P7M_A12TR
`endcelldefine

`celldefine
module NOR3_X0P7A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X0P7A_A12TR
`endcelldefine

`celldefine
module NOR3_X1M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X1M_A12TR
`endcelldefine

`celldefine
module NOR3_X1A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X1A_A12TR
`endcelldefine

`celldefine
module NOR3_X1P4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X1P4M_A12TR
`endcelldefine

`celldefine
module NOR3_X1P4A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X1P4A_A12TR
`endcelldefine

`celldefine
module NOR3_X2M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X2M_A12TR
`endcelldefine

`celldefine
module NOR3_X2A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X2A_A12TR
`endcelldefine

`celldefine
module NOR3_X3M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X3M_A12TR
`endcelldefine

`celldefine
module NOR3_X3A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X3A_A12TR
`endcelldefine

`celldefine
module NOR3_X4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X4M_A12TR
`endcelldefine

`celldefine
module NOR3_X4A_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // NOR3_X4A_A12TR
`endcelldefine

`celldefine
module OR2_X0P5M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X0P5M_A12TR
`endcelldefine

`celldefine
module OR2_X0P7M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X0P7M_A12TR
`endcelldefine

`celldefine
module OR2_X1M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X1M_A12TR
`endcelldefine

`celldefine
module OR2_X11M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X11M_A12TR
`endcelldefine

`celldefine
module OR2_X1P4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X1P4M_A12TR
`endcelldefine

`celldefine
module OR2_X2M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X2M_A12TR
`endcelldefine

`celldefine
module OR2_X3M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X3M_A12TR
`endcelldefine

`celldefine
module OR2_X4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X4M_A12TR
`endcelldefine

`celldefine
module OR2_X6M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X6M_A12TR
`endcelldefine

`celldefine
module OR2_X8M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // OR2_X8M_A12TR
`endcelldefine

`celldefine
module OR3_X0P5M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X0P5M_A12TR
`endcelldefine

`celldefine
module OR3_X0P7M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X0P7M_A12TR
`endcelldefine

`celldefine
module OR3_X1M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X1M_A12TR
`endcelldefine

`celldefine
module OR3_X1P4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X1P4M_A12TR
`endcelldefine

`celldefine
module OR3_X2M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X2M_A12TR
`endcelldefine

`celldefine
module OR3_X3M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X3M_A12TR
`endcelldefine

`celldefine
module OR3_X4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X4M_A12TR
`endcelldefine

`celldefine
module OR3_X6M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X6M_A12TR
`endcelldefine

`celldefine
module OR3_X8M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // OR3_X8M_A12TR
`endcelldefine

`celldefine
module OR4_X0P5M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X0P5M_A12TR
`endcelldefine

`celldefine
module OR4_X0P7M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X0P7M_A12TR
`endcelldefine

`celldefine
module OR4_X1M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X1M_A12TR
`endcelldefine

`celldefine
module OR4_X1P4M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X1P4M_A12TR
`endcelldefine

`celldefine
module OR4_X2M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X2M_A12TR
`endcelldefine

`celldefine
module OR4_X3M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X3M_A12TR
`endcelldefine

`celldefine
module OR4_X4M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X4M_A12TR
`endcelldefine

`celldefine
module OR4_X6M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X6M_A12TR
`endcelldefine

`celldefine
module OR4_X8M_A12TR (Y, A, B, C, D);
output Y;
input A, B, C, D;
endmodule // OR4_X8M_A12TR
`endcelldefine

`celldefine
module OR6_X0P5M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X0P5M_A12TR
`endcelldefine

`celldefine
module OR6_X0P7M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X0P7M_A12TR
`endcelldefine

`celldefine
module OR6_X1M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X1M_A12TR
`endcelldefine

`celldefine
module OR6_X1P4M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X1P4M_A12TR
`endcelldefine

`celldefine
module OR6_X2M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X2M_A12TR
`endcelldefine

`celldefine
module OR6_X3M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X3M_A12TR
`endcelldefine

`celldefine
module OR6_X4M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X4M_A12TR
`endcelldefine

`celldefine
module OR6_X6M_A12TR (Y, A, B, C, D, E, F);
output Y;
input A, B, C, D, E, F;
endmodule // OR6_X6M_A12TR
`endcelldefine

`celldefine
module TIEHI_X1M_A12TR (Y);
output Y;
endmodule //TIEHI_X1M_A12TR 
`endcelldefine

`celldefine
module TIELO_X1M_A12TR (Y);
output Y;
endmodule //TIELO_X1M_A12TR 
`endcelldefine

`celldefine
module RF1R1WS_X1M_A12TR (RBL, WBL, WWL, RWL);
output RBL;
input WBL, WWL, RWL;
endmodule // RF1R1WS_X1M_A12TR
`endcelldefine

`celldefine
module RF1R1WS_X1P4M_A12TR (RBL, WBL, WWL, RWL);
output RBL;
input WBL, WWL, RWL;
endmodule // RF1R1WS_X1P4M_A12TR
`endcelldefine

`celldefine
module RF1R1WS_X2M_A12TR (RBL, WBL, WWL, RWL);
output RBL;
input WBL, WWL, RWL;
endmodule // RF1R1WS_X2M_A12TR
`endcelldefine

`celldefine
module RF1R2WS_X1M_A12TR (RBL, WBL1, WWL1, WBL2, WWL2, RWL);
output RBL;
input WBL1, WWL1, WBL2, WWL2, RWL;
endmodule // RF1R2WS_X1M_A12TR
`endcelldefine

`celldefine
module RF1R2WS_X1P4M_A12TR (RBL, WBL1, WWL1, WBL2, WWL2, RWL);
output RBL;
input WBL1, WWL1, WBL2, WWL2, RWL;
endmodule // RF1R2WS_X1P4M_A12TR
`endcelldefine

`celldefine
module RF1R2WS_X2M_A12TR (RBL, WBL1, WWL1, WBL2, WWL2, RWL);
output RBL;
input WBL1, WWL1, WBL2, WWL2, RWL;
endmodule // RF1R2WS_X2M_A12TR
`endcelldefine

`celldefine
module RF2R1WS_X1M_A12TR (RBL1, RBL2, WBL, WWL, RWL1, RWL2);
output RBL1, RBL2;
input WBL, WWL, RWL1, RWL2;
endmodule // RF2R1WS_X1M_A12TR
`endcelldefine

`celldefine
module RF2R1WS_X1P4M_A12TR (RBL1, RBL2, WBL, WWL, RWL1, RWL2);
output RBL1, RBL2;
input WBL, WWL, RWL1, RWL2;
endmodule // RF2R1WS_X1P4M_A12TR
`endcelldefine

`celldefine
module RF2R1WS_X2M_A12TR (RBL1, RBL2, WBL, WWL, RWL1, RWL2);
output RBL1, RBL2;
input WBL, WWL, RWL1, RWL2;
endmodule // RF2R1WS_X2M_A12TR
`endcelldefine

`celldefine
module RF2R2WS_X1M_A12TR (RBL1, RBL2, WBL1, WWL1, WBL2, WWL2, RWL1, RWL2);
output RBL1, RBL2;
input WBL1, WWL1, WBL2, WWL2, RWL1, RWL2;
endmodule // RF2R2WS_X1M_A12TR
`endcelldefine

`celldefine
module RF2R2WS_X1P4M_A12TR (RBL1, RBL2, WBL1, WWL1, WBL2, WWL2, RWL1, RWL2);
output RBL1, RBL2;
input WBL1, WWL1, WBL2, WWL2, RWL1, RWL2;
endmodule // RF2R2WS_X1P4M_A12TR
`endcelldefine

`celldefine
module RF2R2WS_X2M_A12TR (RBL1, RBL2, WBL1, WWL1, WBL2, WWL2, RWL1, RWL2);
output RBL1, RBL2;
input WBL1, WWL1, WBL2, WWL2, RWL1, RWL2;
endmodule // RF2R2WS_X2M_A12TR
`endcelldefine

`celldefine
module SDFFQ_X0P5M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFQ_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFQ_X1M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFQ_X2M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFQ_X3M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFQ_X4M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFQ_X4M_A12TR
`endcelldefine

`celldefine
module SDFFRPQ_X0P5M_A12TR (Q, D, SI, SE, CK, R);
output Q;
input D, SI, SE, CK, R;
endmodule // SDFFRPQ_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFRPQ_X1M_A12TR (Q, D, SI, SE, CK, R);
output Q;
input D, SI, SE, CK, R;
endmodule // SDFFRPQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFRPQ_X2M_A12TR (Q, D, SI, SE, CK, R);
output Q;
input D, SI, SE, CK, R;
endmodule // SDFFRPQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFRPQ_X3M_A12TR (Q, D, SI, SE, CK, R);
output Q;
input D, SI, SE, CK, R;
endmodule // SDFFRPQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFRPQ_X4M_A12TR (Q, D, SI, SE, CK, R);
output Q;
input D, SI, SE, CK, R;
endmodule // SDFFRPQ_X4M_A12TR
`endcelldefine

`celldefine
module SDFFSQ_X0P5M_A12TR (Q, D, SI, SE, CK, SN);
output Q;
input D, SI, SE, CK, SN;
endmodule // SDFFSQ_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFSQ_X1M_A12TR (Q, D, SI, SE, CK, SN);
output Q;
input D, SI, SE, CK, SN;
endmodule // SDFFSQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFSQ_X2M_A12TR (Q, D, SI, SE, CK, SN);
output Q;
input D, SI, SE, CK, SN;
endmodule // SDFFSQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFSQ_X3M_A12TR (Q, D, SI, SE, CK, SN);
output Q;
input D, SI, SE, CK, SN;
endmodule // SDFFSQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFSQ_X4M_A12TR (Q, D, SI, SE, CK, SN);
output Q;
input D, SI, SE, CK, SN;
endmodule // SDFFSQ_X4M_A12TR
`endcelldefine

`celldefine
module SDFFSRPQ_X0P5M_A12TR (Q, D, SI, SE, CK, SN, R);
output Q;
input D, SI, SE, CK, SN, R;
endmodule // SDFFSRPQ_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFSRPQ_X1M_A12TR (Q, D, SI, SE, CK, SN, R);
output Q;
input D, SI, SE, CK, SN, R;
endmodule // SDFFSRPQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFSRPQ_X2M_A12TR (Q, D, SI, SE, CK, SN, R);
output Q;
input D, SI, SE, CK, SN, R;
endmodule // SDFFSRPQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFSRPQ_X3M_A12TR (Q, D, SI, SE, CK, SN, R);
output Q;
input D, SI, SE, CK, SN, R;
endmodule // SDFFSRPQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFSRPQ_X4M_A12TR (Q, D, SI, SE, CK, SN, R);
output Q;
input D, SI, SE, CK, SN, R;
endmodule // SDFFSRPQ_X4M_A12TR
`endcelldefine

`celldefine
module A2SDFFQ_X0P5M_A12TR (Q, A, B, SI, SE, CK);
output Q;
input A, B, SI, SE, CK;
endmodule // A2SDFFQ_X0P5M_A12TR
`endcelldefine

`celldefine
module A2SDFFQ_X1M_A12TR (Q, A, B, SI, SE, CK);
output Q;
input A, B, SI, SE, CK;
endmodule // A2SDFFQ_X1M_A12TR
`endcelldefine

`celldefine
module A2SDFFQ_X2M_A12TR (Q, A, B, SI, SE, CK);
output Q;
input A, B, SI, SE, CK;
endmodule // A2SDFFQ_X2M_A12TR
`endcelldefine

`celldefine
module A2SDFFQ_X3M_A12TR (Q, A, B, SI, SE, CK);
output Q;
input A, B, SI, SE, CK;
endmodule // A2SDFFQ_X3M_A12TR
`endcelldefine

`celldefine
module A2SDFFQ_X4M_A12TR (Q, A, B, SI, SE, CK);
output Q;
input A, B, SI, SE, CK;
endmodule // A2SDFFQ_X4M_A12TR
`endcelldefine

`celldefine
module ESDFFQ_X0P5M_A12TR (Q, D, CK, E, SE, SI);
output Q;
input D, CK, E, SE, SI;
endmodule // ESDFFQ_X0P5M_A12TR
`endcelldefine

`celldefine
module ESDFFQ_X1M_A12TR (Q, D, CK, E, SE, SI);
output Q;
input D, CK, E, SE, SI;
endmodule // ESDFFQ_X1M_A12TR
`endcelldefine

`celldefine
module ESDFFQ_X2M_A12TR (Q, D, CK, E, SE, SI);
output Q;
input D, CK, E, SE, SI;
endmodule // ESDFFQ_X2M_A12TR
`endcelldefine

`celldefine
module ESDFFQ_X3M_A12TR (Q, D, CK, E, SE, SI);
output Q;
input D, CK, E, SE, SI;
endmodule // ESDFFQ_X3M_A12TR
`endcelldefine

`celldefine
module M2SDFFQ_X0P5M_A12TR (Q, D0, D1, S0, SI, SE, CK);
output Q;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQ_X0P5M_A12TR
`endcelldefine

`celldefine
module M2SDFFQ_X1M_A12TR (Q, D0, D1, S0, SI, SE, CK);
output Q;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQ_X1M_A12TR
`endcelldefine

`celldefine
module M2SDFFQ_X2M_A12TR (Q, D0, D1, S0, SI, SE, CK);
output Q;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQ_X2M_A12TR
`endcelldefine

`celldefine
module M2SDFFQ_X3M_A12TR (Q, D0, D1, S0, SI, SE, CK);
output Q;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQ_X3M_A12TR
`endcelldefine

`celldefine
module M2SDFFQ_X4M_A12TR (Q, D0, D1, S0, SI, SE, CK);
output Q;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQ_X4M_A12TR
`endcelldefine

`celldefine
module SDFFQN_X0P5M_A12TR (QN, D, SI, SE, CK);
output QN;
input D, SI, SE, CK;
endmodule // SDFFQN_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFQN_X1M_A12TR (QN, D, SI, SE, CK);
output QN;
input D, SI, SE, CK;
endmodule // SDFFQN_X1M_A12TR
`endcelldefine

`celldefine
module SDFFQN_X2M_A12TR (QN, D, SI, SE, CK);
output QN;
input D, SI, SE, CK;
endmodule // SDFFQN_X2M_A12TR
`endcelldefine

`celldefine
module SDFFQN_X3M_A12TR (QN, D, SI, SE, CK);
output QN;
input D, SI, SE, CK;
endmodule // SDFFQN_X3M_A12TR
`endcelldefine

`celldefine
module SDFFRPQN_X0P5M_A12TR (QN, D, SI, SE, CK, R);
output QN;
input D, SI, SE, CK, R;
endmodule // SDFFRPQN_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFRPQN_X1M_A12TR (QN, D, SI, SE, CK, R);
output QN;
input D, SI, SE, CK, R;
endmodule // SDFFRPQN_X1M_A12TR
`endcelldefine

`celldefine
module SDFFRPQN_X2M_A12TR (QN, D, SI, SE, CK, R);
output QN;
input D, SI, SE, CK, R;
endmodule // SDFFRPQN_X2M_A12TR
`endcelldefine

`celldefine
module SDFFRPQN_X3M_A12TR (QN, D, SI, SE, CK, R);
output QN;
input D, SI, SE, CK, R;
endmodule // SDFFRPQN_X3M_A12TR
`endcelldefine

`celldefine
module SDFFSQN_X0P5M_A12TR (QN, D, SI, SE, CK, SN);
output QN;
input D, SI, SE, CK, SN;
endmodule // SDFFSQN_X0P5M_A12TR
`endcelldefine

`celldefine
module SDFFSQN_X1M_A12TR (QN, D, SI, SE, CK, SN);
output QN;
input D, SI, SE, CK, SN;
endmodule // SDFFSQN_X1M_A12TR
`endcelldefine

`celldefine
module SDFFSQN_X2M_A12TR (QN, D, SI, SE, CK, SN);
output QN;
input D, SI, SE, CK, SN;
endmodule // SDFFSQN_X2M_A12TR
`endcelldefine

`celldefine
module SDFFSQN_X3M_A12TR (QN, D, SI, SE, CK, SN);
output QN;
input D, SI, SE, CK, SN;
endmodule // SDFFSQN_X3M_A12TR
`endcelldefine

`celldefine
module A2SDFFQN_X0P5M_A12TR (QN, A, B, SI, SE, CK);
output QN;
input A, B, SI, SE, CK;
endmodule // A2SDFFQN_X0P5M_A12TR
`endcelldefine

`celldefine
module A2SDFFQN_X1M_A12TR (QN, A, B, SI, SE, CK);
output QN;
input A, B, SI, SE, CK;
endmodule // A2SDFFQN_X1M_A12TR
`endcelldefine

`celldefine
module A2SDFFQN_X2M_A12TR (QN, A, B, SI, SE, CK);
output QN;
input A, B, SI, SE, CK;
endmodule // A2SDFFQN_X2M_A12TR
`endcelldefine

`celldefine
module A2SDFFQN_X3M_A12TR (QN, A, B, SI, SE, CK);
output QN;
input A, B, SI, SE, CK;
endmodule // A2SDFFQN_X3M_A12TR
`endcelldefine

`celldefine
module ESDFFQN_X0P5M_A12TR (QN, D, CK, E, SE, SI);
output QN;
input D, CK, E, SE, SI;
endmodule // ESDFFQN_X0P5M_A12TR
`endcelldefine

`celldefine
module ESDFFQN_X1M_A12TR (QN, D, CK, E, SE, SI);
output QN;
input D, CK, E, SE, SI;
endmodule // ESDFFQN_X1M_A12TR
`endcelldefine

`celldefine
module ESDFFQN_X2M_A12TR (QN, D, CK, E, SE, SI);
output QN;
input D, CK, E, SE, SI;
endmodule // ESDFFQN_X2M_A12TR
`endcelldefine

`celldefine
module ESDFFQN_X3M_A12TR (QN, D, CK, E, SE, SI);
output QN;
input D, CK, E, SE, SI;
endmodule // ESDFFQN_X3M_A12TR
`endcelldefine

`celldefine
module M2SDFFQN_X0P5M_A12TR (QN, D0, D1, S0, SI, SE, CK);
output QN;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQN_X0P5M_A12TR
`endcelldefine

`celldefine
module M2SDFFQN_X1M_A12TR (QN, D0, D1, S0, SI, SE, CK);
output QN;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQN_X1M_A12TR
`endcelldefine

`celldefine
module M2SDFFQN_X2M_A12TR (QN, D0, D1, S0, SI, SE, CK);
output QN;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQN_X2M_A12TR
`endcelldefine

`celldefine
module M2SDFFQN_X3M_A12TR (QN, D0, D1, S0, SI, SE, CK);
output QN;
input D0, D1, S0, SI, SE, CK;
endmodule // M2SDFFQN_X3M_A12TR
`endcelldefine

`celldefine
module SDFFYQ_X1M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFYQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFYQ_X2M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFYQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFYQ_X3M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFYQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFYQ_X4M_A12TR (Q, D, SI, SE, CK);
output Q;
input D, SI, SE, CK;
endmodule // SDFFYQ_X4M_A12TR
`endcelldefine

`celldefine
module SDFFNQ_X1M_A12TR (Q, D, SI, SE, CKN);
output Q;
input D, SI, SE, CKN;
endmodule // SDFFNQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFNQ_X2M_A12TR (Q, D, SI, SE, CKN);
output Q;
input D, SI, SE, CKN;
endmodule // SDFFNQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFNQ_X3M_A12TR (Q, D, SI, SE, CKN);
output Q;
input D, SI, SE, CKN;
endmodule // SDFFNQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFNRPQ_X1M_A12TR (Q, D, SI, SE, CKN, R);
output Q;
input D, SI, SE, CKN, R;
endmodule // SDFFNRPQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFNRPQ_X2M_A12TR (Q, D, SI, SE, CKN, R);
output Q;
input D, SI, SE, CKN, R;
endmodule // SDFFNRPQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFNRPQ_X3M_A12TR (Q, D, SI, SE, CKN, R);
output Q;
input D, SI, SE, CKN, R;
endmodule // SDFFNRPQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFNSQ_X1M_A12TR (Q, D, SI, SE, CKN, SN);
output Q;
input D, SI, SE, CKN, SN;
endmodule // SDFFNSQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFNSQ_X2M_A12TR (Q, D, SI, SE, CKN, SN);
output Q;
input D, SI, SE, CKN, SN;
endmodule // SDFFNSQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFNSQ_X3M_A12TR (Q, D, SI, SE, CKN, SN);
output Q;
input D, SI, SE, CKN, SN;
endmodule // SDFFNSQ_X3M_A12TR
`endcelldefine

`celldefine
module SDFFNSRPQ_X1M_A12TR (Q, D, SI, SE, CKN, SN, R);
output Q;
input D, SI, SE, CKN, SN, R;
endmodule // SDFFNSRPQ_X1M_A12TR
`endcelldefine

`celldefine
module SDFFNSRPQ_X2M_A12TR (Q, D, SI, SE, CKN, SN, R);
output Q;
input D, SI, SE, CKN, SN, R;
endmodule // SDFFNSRPQ_X2M_A12TR
`endcelldefine

`celldefine
module SDFFNSRPQ_X3M_A12TR (Q, D, SI, SE, CKN, SN, R);
output Q;
input D, SI, SE, CKN, SN, R;
endmodule // SDFFNSRPQ_X3M_A12TR
`endcelldefine

`celldefine
module XNOR2_X0P5M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X0P5M_A12TR
`endcelldefine

`celldefine
module XNOR2_X0P7M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X0P7M_A12TR
`endcelldefine

`celldefine
module XNOR2_X1M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X1M_A12TR
`endcelldefine

`celldefine
module XNOR2_X1P4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X1P4M_A12TR
`endcelldefine

`celldefine
module XNOR2_X2M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X2M_A12TR
`endcelldefine

`celldefine
module XNOR2_X3M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X3M_A12TR
`endcelldefine

`celldefine
module XNOR2_X4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XNOR2_X4M_A12TR
`endcelldefine

`celldefine
module XNOR3_X0P5M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X0P5M_A12TR
`endcelldefine

`celldefine
module XNOR3_X0P7M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X0P7M_A12TR
`endcelldefine

`celldefine
module XNOR3_X1M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X1M_A12TR
`endcelldefine

`celldefine
module XNOR3_X1P4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X1P4M_A12TR
`endcelldefine

`celldefine
module XNOR3_X2M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X2M_A12TR
`endcelldefine

`celldefine
module XNOR3_X3M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X3M_A12TR
`endcelldefine

`celldefine
module XNOR3_X4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XNOR3_X4M_A12TR
`endcelldefine

`celldefine
module XOR2_X0P5M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X0P5M_A12TR
`endcelldefine

`celldefine
module XOR2_X0P7M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X0P7M_A12TR
`endcelldefine

`celldefine
module XOR2_X1M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X1M_A12TR
`endcelldefine

`celldefine
module XOR2_X1P4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X1P4M_A12TR
`endcelldefine

`celldefine
module XOR2_X2M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X2M_A12TR
`endcelldefine

`celldefine
module XOR2_X3M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X3M_A12TR
`endcelldefine

`celldefine
module XOR2_X4M_A12TR (Y, A, B);
output Y;
input A, B;
endmodule // XOR2_X4M_A12TR
`endcelldefine

`celldefine
module XOR3_X0P5M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X0P5M_A12TR
`endcelldefine

`celldefine
module XOR3_X0P7M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X0P7M_A12TR
`endcelldefine

`celldefine
module XOR3_X1M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X1M_A12TR
`endcelldefine

`celldefine
module XOR3_X1P4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X1P4M_A12TR
`endcelldefine

`celldefine
module XOR3_X2M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X2M_A12TR
`endcelldefine

`celldefine
module XOR3_X3M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X3M_A12TR
`endcelldefine

`celldefine
module XOR3_X4M_A12TR (Y, A, B, C);
output Y;
input A, B, C;
endmodule // XOR3_X4M_A12TR
`endcelldefine

`celldefine
module FILLCAP16_A12TR;
endmodule //FILLCAP16_A12TR 
`endcelldefine

`celldefine
module FILLCAP2_A12TR;
endmodule //FILLCAP2_A12TR 
`endcelldefine

`celldefine
module FILLCAP32_A12TR;
endmodule //FILLCAP32_A12TR 
`endcelldefine

`celldefine
module FILLCAP4_A12TR;
endmodule //FILLCAP4_A12TR 
`endcelldefine

`celldefine
module FILLCAP64_A12TR;
endmodule //FILLCAP64_A12TR 
`endcelldefine

`celldefine
module FILLCAP8_A12TR;
endmodule //FILLCAP8_A12TR 
`endcelldefine

`celldefine
module FILLDGCAP16_A12TR;
endmodule //FILLDGCAP16_A12TR 
`endcelldefine

`celldefine
module FILLDGCAP32_A12TR;
endmodule //FILLDGCAP32_A12TR 
`endcelldefine

`celldefine
module FILLDGCAP64_A12TR;
endmodule //FILLDGCAP64_A12TR 
`endcelldefine

`celldefine
module FILLDGCAP8_A12TR;
endmodule //FILLDGCAP8_A12TR 
`endcelldefine

